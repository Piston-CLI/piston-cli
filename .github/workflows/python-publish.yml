name: Upload Python Package

on:
  release:
    types: [created]
jobs:
  fetch_version:
    name: Fetch release version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Ensure tag is in format v*.*.*
      run: "[[ ${{ github.event.release.tag_name }} == v*.*.* ]]"

    - name: Get the version
      id: get_version
      run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

  publish_pypi_package:
    name: Build & Publish PyPI package
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup python
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies using poetry
        run: |
          pip install poetry
          poetry install --no-interaction --no-ansi
      - name: Build package using poetry
        run: poetry build

      - name: Publish package with Poetry
        run: poetry publish
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

  publish_notification:
    name: Publish notification to Discord
    runs-on: ubuntu-latest
    needs: [ publish_pypi_package, fetch_version ]

    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'Piston-CLI v`${{ needs.fetch_version.outputs.version }}` has been published to PyPI.'
